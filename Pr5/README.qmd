---
format:
  md:
    output-file: "README.md"
editor: "visual"
---

# Практика № 5

Исследование информации о состоянии беспроводных сетей

## Цель работы

1.  Получить знания о методах исследования радиоэлектронной обстановки
2.  Составить представление о механизмах работы Wi-Fi сетей на канальном и сетевой уровне модели OSI
3.  Закрепить пректические навыки использования языка программирования R для обработки данных
4.  Закрепить знания основных функций обработки данных экосистемы tidyverse языка R

## Исходные данные

1.  Ноутбук
2.  RStudio
3.  Программный пакет dplyr
4.  tidyverse
5.  CSV-файл с данными

## План выполнения работы

1.  Подготовка данных
2.  Выполнение заданий

## Содержание практической работы

### Шаг 1. Подготовка данных

**На данном шаге производится загрузка данных в систему и подготовка окружения для дальнейшнего анализа**

Подключение пакета tidyverse и readr

```{r}
library(tidyverse)
```

```{r}
library(readr)
```

Отдельно буду хранить данные о запросах на подключение клиентов к известным их точкам доступа, из условия, необходимо перейти к 170 строке датафрейма

```{r}
requestData <- read.csv('./P2_wifi_data.csv', skip = 169)
```

Чтобы убедиться, что импортировались необходимые данные - выведу первые строки полученного датафрейма

```{r}
head(requestData)
```

Так же сформирую другой датасет с первыми 167 строками - анонсы беспроводных точек доступа

```{r}
wireNetData <- read.csv('./P2_wifi_data.csv', nrows = 167)
```

Выведу первые строчки полученного датасета, чтобы убедиться, что в нем содержаться данные

```{r}
head(wireNetData)
```

Далее производится преобразование датасетов в вид "аккуратных данных".

**"Аккуратные данные" -** способ отображения, при котором каждая переменная формирует столбец, а каждое наблюдение - строку.

Преобразование датасета с анонсами

```{r}
wireNetData <- wireNetData %>% 
  mutate_at(vars(BSSID, Privacy, Cipher, Authentication, LAN.IP, ESSID), trimws) %>%
  mutate_at(vars(BSSID, Privacy, Cipher, Authentication, LAN.IP, ESSID), na_if, "")
```

```{r}
wireNetData$First.time.seen <- as.POSIXct(wireNetData$First.time.seen, format = "%Y-%m-%d %H:%M:%S")
```

```{r}
wireNetData$Last.time.seen <- as.POSIXct(wireNetData$Last.time.seen, format = "%Y-%m-%d %H:%M:%S")

```

Преобразование датасета с запросами

```{r}
requestData <- requestData %>% 
  mutate_at(vars(Station.MAC, BSSID, Probed.ESSIDs), trimws) %>%
  mutate_at(vars(Station.MAC, BSSID, Probed.ESSIDs), na_if, "")
```

```{r}
requestData$First.time.seen <- as.POSIXct(requestData$First.time.seen, format = "%Y-%m-%d %H:%M:%S")
```

```{r}
requestData$Last.time.seen <- as.POSIXct(requestData$Last.time.seen, format = "%Y-%m-%d %H:%M:%S")
```

Просмотрю общую структуру данных каждого полученного датасета, чтобы убедится, что данные преобразованы корректно в аккуратный вид

```{r}
glimpse(wireNetData)
```

```{r}
glimpse(requestData)
```

### Шаг 2. Выполнение заданий

**На данном шаге производится выполнение заданий по анализу данных**

Сначала рассматриваются данные о точках доступа

#### Задание 1. Определить небезопасные точки доступа (без шфирования - OPN)

```{r}
allOpnId <- wireNetData %>% filter(Privacy == 'OPN') %>% select(BSSID)
head(unique(allOpnId))
```

#### Задание 2. Определить производителя для каждого обнаруженного устройства

Для выполнения данного здаания буду использовать базу данных производителей из состава Wireshark

E8:28:C1 - Eltex Enterprise Ltd.

00:25:00 - Apple, Inc

E0:D9:E3 - Eltex Enterprise Ltd.

00:26:99 - Cisco Systems, Inc

00:03:7A - Taiyo Yuden Co., Ltd.

00:03:7F6 - Atheros Communications, Inc.

#### Задание 3. Выявить устройства, использующие последнюю версию протокола шифрования WPA3, и названия точек доступа, реализованных на этих устройствах

```{r}
wireNetData %>% filter(str_detect(wireNetData$Privacy, 'WPA3') == TRUE) %>% select(BSSID, ESSID, Privacy)
```

#### Задание 4. Отсортировать точки доступа по интервалу времени, в течении которого они находились на связи, по убыванию.

```{r}
wireNetData %>% mutate(Time = difftime(Last.time.seen, First.time.seen, units = "mins")) %>% arrange(desc(Time)) %>% select(BSSID, Time)
```

#### Задание 5. Обнаружить топ-10 самых быстрых точек доступа

```{r}
wireNetData %>% arrange(desc(Speed)) %>% head(10) %>% select(BSSID, Speed)
```

#### Задание 6. Отсортировать точки доступа по частоте отправки запросов в единицу времени по их убыванию

```{r}
wireNetData %>% mutate(Time = difftime(Last.time.seen, First.time.seen, units = "sec")) %>% filter(!is.na(Time)) %>% filter(Time != 0) %>% filter(X..beacons != 0) %>% select(BSSID, X..beacons, Time) %>% mutate(Beacon_sec = X..beacons / as.integer(Time)) %>% arrange(desc(Beacon_sec))
```

Рассматриваются данные о клиентов

#### Задание 1. Определить производителя для каждого обнаруженного устройства

```{r}
allDecices <- requestData %>% filter(BSSID != '(not associated)') %>% select(BSSID)
unique(allDecices)
```

Воспользуюсь базой данных производителей из состава Wireshark

00:25:00 Apple, Inc.

00:03:7F Atheros Communications, Inc.

00:23:EB Cisco Systems, Inc

00:0D:97 Hitachi Energy USA Inc.

08:3A:2F Guangzhou Juan Intelligent Tech Joint Stock Co.,Ltd

E0:D9:E3 Eltex Enterprise Ltd.

DC:09:4C Huawei Technologies Co.,Ltd

E8:28:C1 Eltex Enterprise Ltd.

0C:80:63 Tp-Link Technologies Co.,Ltd.

00:26:99 Cisco Systems, Inc

#### Задание 2. Обнаружить устройства, которые НЕ рандомизируют свой MAC адрес

```{r}
result <- requestData %>% filter(grepl("(.2:..:..:)(..:..:..)", Station.MAC)!=TRUE & grepl("(.6:..:..:)(..:..:..)", Station.MAC)!=TRUE & grepl("(.A:..:..:)(..:..:..)", Station.MAC)!=TRUE & grepl("(.E:..:..:)(..:..:..)", Station.MAC)!=TRUE) %>%  select(Station.MAC)
```

```{r}
head(result)
```

#### Задание 3. Кластеризовать запросы от устройств к точкам доступа по их именам. Определить время появления устройства в зоне радиовидимости и время выхода его из нее

```{r}
result1 <- requestData %>% filter(!is.na(Probed.ESSIDs)) %>% group_by(Probed.ESSIDs) %>%  summarise("Появление" = min(First.time.seen), "Выход" = max(Last.time.seen))
```

```{r}
head(result1)
```

#### Задание 4. Оценить стабильность уровня сигнала внутри кластера во времени. Выявить наиболее стабильный кластер

```{r}
result2 <- requestData %>% mutate(Time = difftime(Last.time.seen, First.time.seen, units = "sec")) %>% filter(as.integer(Time) != 0) %>% arrange(desc(as.integer(Time))) %>% filter(!is.na(Probed.ESSIDs)) %>% group_by(Probed.ESSIDs) %>% summarise(Mean = mean(as.integer(Time)), Sd = sd(as.integer(Time))) %>% filter(!is.na(Sd)) %>% filter(Sd != 0) %>% arrange(Sd) %>% head(1)
```

```{r}
print(result2)
```

## Оценка результатов

1.  Были успешно получены данные из csv-файла и преобразованы в вид “аккуратных данных”

2.  Был произведен анализ полученных данных, используя функционал tidyverse

## Вывод

1.  Получены знания о методах исследования радиоэлектронной обстановки
2.  Составлено представление о механизмах работы Wi-Fi сетей на канальном и сетевой уровне модели OSI
3.  Закреплены практические навыки использования языка программирования R для обработки данных
4.  Закреплены знания основных функций обработки данных экосистемы tidyverse языка R
